import React, { useState, useEffect, Fragment} from 'react'
import {Loader, Card, FormField}  from "../components/index"

const RenderCards = ({data, title}) => {
  if(data?.length > 0 && typeof data == "object") return data?.map((post) => <Card
    key={post._id}
    {...post}
  />)
  return <h2 className='mt-5 font-bold text-[#6449ff] text-xl uppercase'>{title}</h2>
}

const Home = () => {
  const [loading, setLoading] = useState(false)
  const [allPost, setAllPosts] = useState(null)
  const [searchText, setSearchText] = useState("")
  const [searchedResult, setSearchedResult] = useState(null)
  const [searcheTimeout, setSearcheTimeout] = useState(null)
  useEffect(() => {
    const fetchPost = async () => {
      try {
        setLoading(true)
        const response  = await fetch('http://localhost:8080/api/v1/post',{
          method:'GET',
          headers:{
            'Content-Type':'application/json'
          }
        })
        if(response.ok){
          const result = await response.json()
          setAllPosts(result.data.reverse())
        }
      } catch (error) {
        console.log(error)
        alert(error)
      }finally{
        setLoading(false)
      }
    }
    fetchPost()
  },[])
  const handleSearchChange = (e) => {
    try {
      clearTimeout(searcheTimeout)
      setSearchText(e.target.value)
      setSearcheTimeout(setTimeout(() => {
        const searchResult = allPost?.filter((item) => (item.name.toLowerCase().includes(searchText.toLowerCase()) ||
        item.prompt.toLowerCase().includes(searchText.toLowerCase())))
        setSearchedResult(searchResult)
      },500))

    } catch (error) {
      console.log(error)
    }
  }
  return (
    <section className='max-w-7xl mx-auto'>
      <div>
        <h1 className='font-extrabold text-[#222328] text-[33px]'>The community showcase</h1>
        <p className='mt-2 text-[#666e75] text-[16px] max-w-[500px]'>
          Browse through a collection of imaginative and Visually stunning images generated by DALL-E AI
        </p>
      </div>
      <div className='mt-16'>
        <FormField
          labelName="Search posts"
          type="text"
          name="text"
          placeholder="Search posts"
          value={searchText}
          handleChange={handleSearchChange}
        />
      </div>
      <div className='mt-10'>
        {loading ? (
          <div className='flex justify-center items-center'>
            <Loader/>
          </div>
        ):(
          <>
            {
              !!searchText && (
                <h2 className='font-medium text-[#666e75] text-xl mb-3'>
                  Showing results for <span className='text-[#222328]'>
                    {
                      searchText
                    }
                  </span>
                </h2>
              )
            }
            <div className='grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3'>
              {
                searchText ? (
                  <RenderCards
                    data={searchedResult}
                    title="No Search results found"
                  />
                ):(
                  <RenderCards 
                    data={allPost}
                    title="No Posts found"
                  />
                )
              }
            </div>
          </>
        )}
      </div>
    </section>
  )
}

export default Home